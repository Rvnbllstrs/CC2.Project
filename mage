package character;

import item.Summon;

/**
 * Mage extends from the abstract class Character.Java and overrides wound
 * and summon pet and has its own value for the armor variable. This Class also
 * implements Summon.Java an interface class and overrides petability method.
 */
public class Mage extends Character implements Summon {

    private int manapoints;

    /**
     * The constructor method takes 3 parameters: n,s and d and assigns them to
     * instance variables name, strength and dexterity. Then the super class
     * which is the Character is then called and is initialized using the
     * parameters and some of default values Intelligence = 25, Armor = 2.
     * Lastly variable mana points is set to a default value which is 10;
     *
     */
    public Mage(String n, int s, int d) {
        super(n, s, d, 25, 2);
        this.manapoints = 20;
    }

    /**
     * This method is the Mage special skill which when called it damages the
     * enemy using his intelligence plus a random value from the class dice then
     * reduces his mana points. The mana points is then reduced to 5 and when
     * the mage is out of mana points it returns 0 damage.
     */
    public int fireball() {
        int x = this.getIntelligence() + super.dice.roll();
        int damage = 0;
        if (this.manapoints <= 0) {
            damage = 0;
        } else {
            damage = x;
        }
        this.manapoints = this.manapoints - 5;
        return damage;
    }

    /**
     * Overridden method from the abstract class Character because the mage has
     * an armor but still decreases currentlife by the damage parameter
     */
    @Override
    public void wound(int damage) {
        int x = (this.currentlife + this.armor) - damage;
        if (x > 0) {
            this.currentlife = x;
        } else if (x <= 0) {
            this.currentlife = 0;
        }
    }

    /**
     * Overridden method from the abstract class Character.Java that returns an
     * integer value of a random number from the class dice.
     */
    @Override
    public int summonpet() {
        return dice.roll() - 1;
    }

    /**
     * Overridden method from the interface class Summon.Java that first calls
     * the summonpet method to check if the dice rolled into the needed value.
     * If it rolled successfully the mage summons his pet and prints a message
     * then adds a 5 to his intelligence , if not it prints a failure.
     */
    @Override
    public void petability() {
        int x = summonpet();
        // summon successful and fireball damage + 5;
        if (x % 2 == 0) {
            System.out.println(super.getName() + " summons a Phoenix! Fireball damage is permanently increased by 5!");
            this.intelligence += 5;

        } else {
            System.out.println(super.getName() + " fails to summon pet!");
        }

    }

}
